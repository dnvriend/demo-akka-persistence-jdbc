# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = WARNING
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "postgres-journal"
    snapshot-store.plugin = "postgres-snapshot-store"
  }

  actor {
    serialize-messages = off // verify that messages are serializable

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = on // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
  }
}

# general slick configuration
slick {
  profile = "akka.persistence.postgres.db.ExtendedPostgresProfile$"
  db {
    url = "jdbc:postgresql://localhost:5432/docker"
    user = "docker"
    password = "docker"
    driver = "org.postgresql.Driver"

    // hikariCP
    numThreads = 1 // number of cores
    maxConnections = 1 // 2 * numThreads + 1 (if running on an SSD)
    minConnections = 1  // same as numThreads

    connectionTestQuery = SELECT 1 // postgres doesnt support connection timeout
  }
}
